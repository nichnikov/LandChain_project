"""
https://python.langchain.com/docs/integrations/chat/openai/
"""

# Example 2
text = """
Текст № 1: Заголовок: Можно ли предоставить сотруднику отпуск только на выходные дни. Материал:  Ежегодный отпуск предоставляют в календарных днях, а не рабочих. Поэтому отпуск сотрудника может приходиться в том числе на субботу и воскресенье. Это закон не запрещает. Однако предоставлять отпуск только на выходные дни нельзя (ст. 115 ТК).
Предоставить сотруднику отпуск только на выходные дни нельзя. Вы лишите его права использовать все виды отдыха, которые положены ему по закону, – еженедельный непрерывный отдых и ежегодный отпуск. Так как это разные виды отдыха и один не подменяет другого (ст. 106, 107 ТК). Кроме того, оформление отпуска на выходные дни увеличивает фактическую продолжительность рабочего времени сотрудника в рабочем году (ст. 91 ТК).
На это также указывают специалисты Минтруда в письме от 07.12.2018 № 14-2/ООГ-9754.
Поэтому, чтобы избежать административной ответственности, предоставлять сотруднику ежегодный отпуск только на выходные дни не следует. При этом работодатель не нарушит закон, если начало отпуска сотрудника или окончание придется на выходные. 
"""
query = """Здравствуйте. Подскажите может ли сотрудник оформлять дни ежегодного отпуска только на выходные дни?"""

prompt_1 = """
        Ты квалифицированный бухгалтер, тебе передали 
        Бухгалтерский вопрос пользователя: {query} и
        Бухгалтерский Текст с Номером и Заголовком: {text}

        Сформулируй: Чего хочет пользователь?
        Напиши: ... 


        Тебе нужно подготовить план поиска ответа на бухгалтерский вопрос в тексте. 
        План должен учитывать проверку наличия в тексте Чего хочет пользователь.

        В план должны входить:
        1. Совпадает ли система налогообложения текста и желания пользователя
            справка по Системам налогообложения:
            - Общая система (ОСНО), 
            - Упрощенная система (УСН), 
            - Патентная система (ПСН) 
            - Налог на профессиональный доход (НПД)
            - Единый сельскохозяйственный налог (ЕСХН)
            - из желания пользователя непонятно о какой системе налогообложения идет речь
        2. Хозяйственные или трудовые отношения в вопросе и тексте:
            а) хозяйственных отношениях 
            б) трудовых отношениях (между работником и работодателем)
            
        3. Дает ли текст ответ на вопрос.

        Добавь свои пункты, полезные для получения ответа на вопрос:
        4. ...
        ....
        
        """

        
prompt_2 = """
        Ты опытный бухгалтер 
        Тебе передали: Вопрос пользователя: {query}
        Бухгалтерский Текст, в котором возможно содержится ответ: {text}
        Подготовленный твоим коллегой "План подготовки ответа": {prompt_1}

        Напиши на каждый пункт "План подготовки ответа" 
        Соответствествующий развернутый ответ на базе Бухгалтерского Текста и Вопрос пользователя.
        ПЛАН С РАЗВЕРНУТЫМИ ОТВЕТАМИ:
        1 ...
        2 ...
        ...
        
        Проанализируй получившиеся ответы
        В случае наличия противоречий (в тексте нет прямого соответствия пункту плана с ответом) 
        Нужно строго указать на эти противоречия.
        Противоречия: 
        1. ...
        2. ...
        ....
        или Напиши: Противоречий нет
            """

prompt_3 = """
    Собрали 3х независимых экспертов в области бухгалтерского учета.

    Каждому эксперту выдали: 
    Бухгалтерский вопрос: {query}
    Анализ текста по пунктам с указанием противоречий: {prompt_2}
    Бухгалтерски текст в котором возможно содержится ответ: {text}
    
    
    Перед экспертами поставили задачу оценить утверждение: "Бухгалтерский текст может ответить на вопрос".
    Эксперты не видят заключения друг друга. Опираются только на текст, сформулированное желание пользователя и "ПЛАН С РАЗВЕРНУТЫМИ ОТВЕТАМИ"
    Не делают никаких суждений за их пределами. 

    Эксперты склонны не доверять друг другу.
    
    Каждый эксперт оценивает каждый пункт в плане и очень строго обращает внимание на пункты противоречий.
    Каждый эксперт должен провести анализ плана с развернутыми ответами и в конце выдать заключение (только словами из списка ниже):
    - Совершенно не согласен
    - Не согласен
    - Скорее не согласен
    - Скорее согласен
    - Согласен
    - Полностью Согласен

    Напиши ответы экспертов:
    Эксперт 1: 
    Анализ "плана с развернутыми ответами":
    1 ...
    2 ...
    ...
    Заключение: ...
    
    Забудь все, что сказал Эксперт 1

    Эксперт 2: ...
    Анализ "плана с развернутыми ответами":
    1 ...
    2 ...
    ...
    Заключение: ...
    
    Забудь все, что сказал Эксперт 1 и Эксперт 2
    
    Эксперт 3: ...
    Анализ "плана с развернутыми ответами":
    1 ...
    2 ...
    ...
    Заключение: ...

    Правила формирования общего мнения (решение большинства экспертов): 
    1. только "ЕСТЬ ОТВЕТ" или "НЕТ ОТВЕТА"
    2. ЕСТЬ ОТВЕТ: Два или Три эксперта из трех: "Скорее согласен", "Согласен" или "Полностью согласен" и ни одного эксперта "Совершенно не согласен"
    3. НЕТ ОТВЕТА: хотя бы один из экспертов: "Совершенно не согласен". Два эксперта из трех или все три Эксперта: "Не согласен" или "Скорее не согласен"
    
    Перечисли мнение каждого эксперта:
    Эксперт 1: ... Эксперт 2: ... Эксперт 3: ...
    
    Напиши, сколько экспертов "Скорее согласен", "Согласен" или "Полностью согласен" и Сколько "Не согласен" или "Скорее не согласен"?
    Есть ли "Совершенно не согласен" ?
    и сформулируй общее мнение на основании правил
    ОБЩЕЕ МНЕНИЕ: ...
    """


from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate


llm = ChatOpenAI(
    model="gpt-4o",
    temperature=0,
    max_tokens=None,
    timeout=None,
    max_retries=2,
    api_key="sk-or-vv-17bd53f8f505e0a1d24a3bf0a8bb702e13edbc78c89ac9aa41f6bda7ec72270c",  # if you prefer to pass api key in directly instaed of using env vars
    base_url="https://api.vsegpt.ru/v1",
    # organization="...",
    # other params...
)


prompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            "You are a helpful assistant that translates {input_language} to {output_language}.",
        ),
        ("human", "{input}"),
    ]
)

chain = prompt | llm
r2 = chain.invoke(
    {
        "prompt_1": "prompt_1",
        "prompt_2": "prompt_2",
        "input": "I love programming.",
    }
).content

print(r2)

'''
prompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            "You are a helpful assistant that translates {input_language} to {output_language}.",
        ),
        ("human", "{input}"),
    ]
)

chain = prompt | llm
r2 = chain.invoke(
    {
        "input_language": "English",
        "output_language": "German",
        "input": "I love programming.",
    }
).content
'''

